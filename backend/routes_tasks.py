from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from extensions import db
from models import Task

tasks_bp = Blueprint("tasks", __name__)

# üîπ –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞
@tasks_bp.route("/tasks", methods=["POST"])
@jwt_required()
def create_task():
    user_id = get_jwt_identity()
    data = request.get_json()

    title = data.get("title")
    description = data.get("description")

    if not title:
        return jsonify({"message": "–ó–∞–≥–ª–∞–≤–∏–µ—Ç–æ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ"}), 400

    new_task = Task(
        title=title,
        description=description,
        completed=False,
        user_id=user_id
    )
    db.session.add(new_task)
    db.session.commit()

    return jsonify({"message": "–ó–∞–¥–∞—á–∞—Ç–∞ –µ —Å—ä–∑–¥–∞–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"}), 201


# üîπ –í–∑–∏–º–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –∑–∞–¥–∞—á–∏ –∑–∞ —Ç–µ–∫—É—â–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
@tasks_bp.route("/tasks", methods=["GET"])
@jwt_required()
def get_tasks():
    user_id = get_jwt_identity()
    tasks = Task.query.filter_by(user_id=user_id).all()

    return jsonify([
        {
            "id": task.id,
            "title": task.title,
            "description": task.description,
            "completed": task.completed,
            "created_at": task.created_at
        }
        for task in tasks
    ]), 200


# üîπ –í–∑–∏–º–∞–Ω–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∑–∞–¥–∞—á–∞
@tasks_bp.route("/tasks/<task_id>", methods=["GET"])
@jwt_required()
def get_task(task_id):
    user_id = get_jwt_identity()
    task = Task.query.filter_by(id=task_id, user_id=user_id).first()

    if not task:
        return jsonify({"message": "–ó–∞–¥–∞—á–∞—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞"}), 404

    return jsonify({
        "id": task.id,
        "title": task.title,
        "description": task.description,
        "completed": task.completed,
        "created_at": task.created_at
    }), 200


# üîπ –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∑–∞–¥–∞—á–∞
@tasks_bp.route("/tasks/<task_id>", methods=["PUT"])
@jwt_required()
def update_task(task_id):
    user_id = get_jwt_identity()
    task = Task.query.filter_by(id=task_id, user_id=user_id).first()

    if not task:
        return jsonify({"message": "–ó–∞–¥–∞—á–∞—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞"}), 404

    data = request.get_json()
    task.title = data.get("title", task.title)
    task.description = data.get("description", task.description)
    task.completed = data.get("completed", task.completed)

    db.session.commit()
    return jsonify({"message": "–ó–∞–¥–∞—á–∞—Ç–∞ –µ –æ–±–Ω–æ–≤–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"}), 200


# üîπ –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∑–∞–¥–∞—á–∞
@tasks_bp.route("/tasks/<task_id>", methods=["DELETE"])
@jwt_required()
def delete_task(task_id):
    user_id = get_jwt_identity()
    task = Task.query.filter_by(id=task_id, user_id=user_id).first()

    if not task:
        return jsonify({"message": "–ó–∞–¥–∞—á–∞—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞"}), 404

    db.session.delete(task)
    db.session.commit()
    return jsonify({"message": "–ó–∞–¥–∞—á–∞—Ç–∞ –µ –∏–∑—Ç—Ä–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ"}), 200
